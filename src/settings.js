'use strict';

const LINE_SEPARATOR = require('os').EOL; // Was '\n' before

const BLANK_FILE = [
    // Maybe get rid of this line if always intended to be consumed as ES6 modules?
    "'use strict';", 
    "",
    "const Table = {",
    "    // Define the table object literal as prototype and columns:",
    "    // { __proto__: Table, heading1: iterable, ...}.",
    "    // Calling eval turns the table into an array of",
    "    // {h: v, ...} row records (accessed by t[row index][col name]).",
    "    eval() {",
    "        Object.setPrototypeOf(this, ConsumedTable);",
    "        // TODO also preserve the columns as memoised values?",
    "        const iterator_pairs = Object.entries(this)",
    "            .map( ([h, i]) => [h, i[Symbol.iterator]()] );",
    "        if (iterator_pairs.length === 0) { return }",
    "        // Generate rows ( {heading: value, ...} )",
    "        let row, done = false;",
    "        for (let index = 0;;index++) {",
    "            // Remember past rows",
    "            this[index] = row = {};",
    "            for (let [h, iterator] of iterator_pairs) {",
    "                Object.defineProperty(row, h, {",
    "                    configurable: true, // So we can delete the prop later",
    "                    get() {",
    "                        const item = iterator.next();",
    "                        if (item.done) {done = true; return;}",
    "                        // Yield only once from each column; store the values",
    "                        delete this[h];",
    "                        return this[h] = item.value;",
    "                    }",
    "                });",
    "            }",
    "            // Trigger access for all props in row",
    "            for (let [h, _] of iterator_pairs) { row[h] }",
    "            if (done) {",
    "                delete this[index];",
    "                this.length = index;",
    "                return this;",
    "            }",
    "        }",
    "    }",
    "}",
    "",
    "const ConsumedTable = { __proto__: Array.prototype, }",
    "const DATA = [];",
    "",
    "// Transform data into a spreadsheet object",
    "const SHEET = {};",
    "for (let [k, _, v] of DATA) {",
    "    Object.defineProperty(SHEET, k, {",
    "        get: () => {delete SHEET[k]; SHEET[k]=v(SHEET);",
    "                   if (Table.isPrototypeOf(SHEET[k])) {SHEET[k].eval()};",
    "                   return SHEET[k]},",
    "        configurable: true",
    "    })",
    "}",
    // Add ES6 export line?
].join(LINE_SEPARATOR);

module.exports = { LINE_SEPARATOR, BLANK_FILE }
